/* ==========================================================================
    GRIDLEX
    Just a Flexbox Grid System
========================================================================== */

@import "gridlex-vars";

[class*="#{$gl-gridName}"]{
  box-sizing: border-box;
  display: flex;
  flex-flow: row wrap;
  margin: 0 (-$gl-gutter/2);
}
.#{$gl-colName},
[class*="#{$gl-colName}-"]{
  box-sizing: border-box;
  flex: 0 0 auto;
  padding: 0 ($gl-gutter/2) $gl-col-bottom;
  width: 100%;
}
.#{$gl-colName}{
  flex: 1 1 0%;
}
.#{$gl-gridName}.#{$gl-colName},
.#{$gl-gridName}[class*="#{$gl-colName}-"]{
  margin: 0;
  padding: 0;
}

/************************
    HELPERS SUFFIXES
*************************/
// FOR GRID
[class*="#{$gl-gridName}-"]{
// No spacing between cols : noGutter
  &[class*="-noGutter"]{
    margin: 0;
    > [class*="#{$gl-colName}"]{
      padding: 0;
    }
  }

// Horizontal alignment
  &[class*="-center"]{
    justify-content: center;
  }
  &[class*="-right"]{
    justify-content: flex-end;
    align-self: flex-end;
    margin-left: auto;
  }
// Vertical alignment
  &[class*="-top"]{
    align-items: flex-start;
  }
  &[class*="-middle"]{
    align-items: center;
  }
  &[class*="-bottom"]{
    align-items: flex-end;
  }

// Orders
  &[class*="-reverse"]{
    flex-direction: row-reverse;
  }
  &[class*="-column"] {
    flex-direction: column;
    > [class*="#{$gl-colName}-"] {
      flex-basis: auto;
    }
  }
  &[class*="-column-reverse"]{
    flex-direction: column-reverse;
  }

// Spaces between and around cols
  &[class*="-spaceBetween"]{
    justify-content: space-between;
  }
  &[class*="-spaceAround"]{
    justify-content: space-around;
  }

// Equal heights columns
  &[class*="-equalHeight"] > [class*="#{$gl-colName}"]{
    display: flex;
  }
// Removes the padding-bottom
  &[class*="-noBottom"] > [class*="#{$gl-colName}"]{
    padding-bottom: 0;
  }
}

// FOR COL
[class*="#{$gl-colName}-"]{
  &[class*="-top"]{
    align-self: flex-start;
  }
  &[class*="-middle"]{
    align-self: center;
  }
  &[class*="-bottom"]{
    align-self: flex-end;
  }
  &[class*="-first"]{
    order: -1;
  }
  &[class*="-last"]{
    order: 1;
  }
}

/************************
    HIDING COLS
*************************/
[class*="#{$gl-colName}-"]:not([class*="#{$gl-colName}-0"]) {
  display: block;
}
[class*="#{$gl-gridName}"][class*="#{$gl-colName}-"]:not([class*="#{$gl-colName}-0"]) {
  display: flex;
}
[class*="#{$gl-colName}-0"] {
  display: none;
}
@mixin responsiveHide($breakpoints) {
  @each $breakpoint-name, $breakpoint-value in $breakpoints {
    @media screen and (min-width: $breakpoint-value) {
      [class*="#{$gl-colName}-"]:not([class*="_#{$breakpoint-name}-0"]) {
        display: block;
      }
      [class*="#{$gl-gridName}"][class*="#{$gl-colName}-"]:not([class*="_#{$breakpoint-name}-0"])  {
        display: flex;
      }
      [class*="#{$gl-colName}-"][class*="_#{$breakpoint-name}-0"]{
        display: none;
      }
    }
  }
}
@include responsiveHide($breakpoints);

/************************
    GRID BY NUMBER
*************************/
@include makeGridByNumber(#{$gl-gridName});

@media #{$gl-lg}{
  @include makeGridByNumber(_lg);
}
@media #{$gl-md}{
  @include makeGridByNumber(_md);
}
@media #{$gl-sm}{
  @include makeGridByNumber(_sm);
}
@media #{$gl-xs}{
  @include makeGridByNumber(_xs);
}

/************************
    COLS SIZES
*************************/
@include makeCol(#{$gl-colName});
@include makeOff(off);

@media #{$gl-lg}{
  @include makeCol(_lg);
  @include makeOff(_lg);
}
@media #{$gl-md}{
  @include makeCol(_md);
  @include makeOff(_md);
}
@media #{$gl-sm}{
  @include makeCol(_sm);
  @include makeOff(_sm);
}
@media #{$gl-xs}{
  @include makeCol(_xs);
  @include makeOff(_xs);
}



/************************
    SPACING
*************************/
// margin and padding values array
$space-values : (
  0,
  5,
  10,
  15,
  20,
  25,
  30,
  35,
  40,
  45,
  50,
  60,
  70,
  80,
  90,
  100
) !default;

// margin and padding shorthands
$space-prefixes : (
  p  : padding,
  pt : padding-top,
  pr : padding-right,
  pb : padding-bottom,
  pl : padding-left,
  px : (padding-left, padding-right),
  py : (padding-top, padding-bottom),
  m  : margin,
  mt : margin-top,
  mr : margin-right,
  mb : margin-bottom,
  ml : margin-left,
  mx : (margin-left, margin-right),
  my : (margin-top, margin-bottom),
) !default;


@mixin print-values-xs($prefixes, $breakpoint-name, $values) {
  @each $attr-short, $attr-long in $prefixes {
    @each $value in $values {
      .#{$attr-short}-#{$value} {
        @if(length($attr-long)) {
          @each $a in $attr-long {
            #{$a}: #{$value}px;
          }
        } @else {
          #{$attr-long}: #{$value}px;
        }
      }
    }
  }
}

@mixin print-values($prefixes, $breakpoint-name, $values) {
  @each $attr-short, $attr-long in $prefixes {
    @each $value in $values {
      .#{$attr-short}-#{$breakpoint-name}-#{$value} {
        @if(length($attr-long)) {
          @each $a in $attr-long {
            #{$a}: #{$value}px;
          }
        } @else {
          #{$attr-long}: #{$value}px;
        }
      }
    }
  }
}

// main function definition
@mixin make-space($prefixes, $breakpoints, $values) {
  @each $breakpoint-name, $breakpoint-value in $breakpoints {
    // if xs value = 0, set it global without media queries
    @if($breakpoint-value == 0) {
      @include print-values-xs($prefixes, $breakpoint-name, $values);
    }
    // breakpoint values that not equal to 0
    @else {
      @media screen and (min-width: $breakpoint-value) {
        @include print-values($prefixes, $breakpoint-name, $values);
      }
    }
  }
}
@include make-space($space-prefixes, $breakpoints, $space-values );



.text-left { text-align: left; }
.text-right { text-align: right; }
.text-center { text-align: center; }
.text-justify { text-align: justify; }
@media #{$gl-sm}{
  .text-sm-left { text-align: left; }
  .text-sm-right { text-align: right; }
  .text-sm-center { text-align: center; }
  .text-sm-justify { text-align: justify; }
}
@media #{$gl-md}{
  .text-md-left { text-align: left; }
  .text-md-right { text-align: right; }
  .text-md-center { text-align: center; }
  .text-md-justify { text-align: justify; }
}
@media #{$gl-lg}{
  .text-xl-left { text-align: left; }
  .text-xl-right { text-align: right; }
  .text-xl-center { text-align: center; }
  .text-xl-justify { text-align: justify; }
}
@media #{$gl-xl}{
  .text-xl-left { text-align: left; }
  .text-xl-right { text-align: right; }
  .text-xl-center { text-align: center; }
  .text-xl-justify { text-align: justify; }
}
